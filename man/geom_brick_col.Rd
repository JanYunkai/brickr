% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-brick-col.R
\name{geom_brick_col}
\alias{geom_brick_col}
\title{Bar charts with bricks - ggplot2 extension}
\usage{
geom_brick_col(
  mapping = NULL,
  data = NULL,
  position = "dodge",
  two_knob = TRUE,
  split_bricks = TRUE,
  min_radius_for_text = 0.02,
  label = "brickr",
  label_scale = 1,
  ...,
  width = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{position}{It it not recommended to use \code{position = "stack"}.}

\item{two_knob}{Logical. Each bar is two knobs / studs wide. When rendering many \code{x} values, set to \code{FALSE}.}

\item{split_bricks}{Logical. For simpler bars, do not split into individual bricks. Knobs still render.}

\item{min_radius_for_text}{Knob radius as a percentage of view port. If the calculated radius is lower than this value, embossed label will not appear in knobs.}

\item{label}{Character string to include as embossed text inside brick knobs. Maximum 6 characters.}

\item{label_scale}{Scale text size of label as a percentage.
Sizing for the embossed text can be off. A best attempt at the text size is calculated from the device size. Zooming a plot in the RStudio window will not update the text size.
If the automated size doesn't look correct after rendering the chart, use this scale.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{width}{Bar width. By default, set to 90\% of the resolution of the data.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\description{
\code{geom_brick_col()} is the \code{brickr} version of \code{ggplot2::geom_col()}.
Bar height is determined by values in the data using the \code{y} aesthetic. With the exception of \code{fill}, aesthetics available in \code{ggplot2::geom_col()} are generally not enabled here.
}
\examples{
#geom_brick_col should be used in conjunction with other brickr charting 
#functions, especially coord_brick.
df <- data.frame(trt = c("a", "b", "c"), outcome = c(2.3, 1.9, 3.2))
ggplot(df, aes(trt, outcome)) +
  geom_brick_col() +
  coord_brick()
  
#For official LEGO colors, use with scale_fill_brick and theme_brick.
ggplot(df, aes(trt, outcome)) +
  geom_brick_col(aes(fill = trt)) +
  scale_fill_brick() +
  coord_brick() +
  theme_brick()
}
\seealso{
Other Graphs: 
\code{\link{coord_brick}()},
\code{\link{geom_brick_rect}()},
\code{\link{scale_fill_brick}()},
\code{\link{theme_brick}()}
}
\concept{Graphs}
